type Tournament {
  id: ID!
  date: String!
  location: String!
  name: String!
  open: Boolean!
}

type Player {
  id: ID!
  name: String!
  shortName: String!
  email: String
  elo: Float!
  experience: Int!
}

input GameRequest {
  limit: Int
  offset: Int
  winnerId: Int
  loserId: Int
}

input PlayerRequest {
  limit: Int
  offset: Int
  id: Int
  name: String
}

type Game {
  id: ID!
  loser: Player!
  winner: Player!
  length: Int!
  round: Int!
  created: String!
  winnerScore: Int
  loserScore: Int
  tournament: Tournament!
}

type Query {
  player(id: Int!): Player!
  players(request: PlayerRequest!): [Player!]!
  games(request: GameRequest!): [Game!]!
}

